//Brute Force Method

int f(int i,int j){
      if(i==0 && j==0){
        return 1;
    }
    if(i<0 || j<0){
        return 0;
    }
    int up = f(i-1, j);
    int left = f(i, j-1);
    return up+left;
}
int uniquePaths(int m, int n) {
   return f(m-1, n-1);
}


//Memoization Method

int f(int i,int j,int** dp){
    
      if(i==0 && j==0){
        return 1;
    }
    if(i<0 || j<0){
        return 0;
    }
    if(dp[i][j] != -1) return dp[i][j];
    int up = f(i-1, j,dp);
    int left = f(i, j-1,dp);
    return dp[i][j] = up+left;
}
int uniquePaths(int m, int n) {
    int** dp = (int**)malloc(m * sizeof(int*));
    for (int i = 0; i < m; i++) {
        dp[i] = (int*)malloc(n * sizeof(int));
        memset(dp[i], -1, n * sizeof(int));
    }
   return f(m-1, n-1,dp);
}




//Tabulation Method

int uniquePaths(int m, int n) {
    int dp[m][n];
    for(int i = 0;i<m;i++){
        dp[i][0]=1;
    }
    for(int j = 0;j<n;j++){
        dp[0][j]=1;
    }

    for(int i=1;i<m;i++){
        for(int j=1;j<n;j++){
            dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
        }
    }
    return dp[m-1][n-1];
   
}





