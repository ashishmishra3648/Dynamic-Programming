// Brute Force Method

int f(int i, int j, int** grid) {
    // Base cases
    if (i == 0 && j == 0) {
        return grid[0][0]; // Starting point value
    }
    if (i < 0 || j < 0) {
        return INT_MAX / 2; // Use a large value that won't overflow
    }

    // Recursive calculation for minimum path sum
    int up = f(i - 1, j, grid);
    int left = f(i, j - 1, grid);

    return grid[i][j] + fmin(up, left);
}

int minPathSum(int** grid, int gridSize, int* gridColSize) {
    int n = gridSize;
    int m = *gridColSize;

    // Start recursion from the bottom-right corner
    return f(n - 1, m - 1, grid);
}


//Memoization Method

int f(int i, int j, int** grid, int** dp) {
    // Base cases
    if (i == 0 && j == 0) return grid[0][0];
    if (i < 0 || j < 0) return INT_MAX / 2; // Avoid overflow

    // Check memoized result
    if (dp[i][j] != -1) return dp[i][j];

    // Compute the minimum path sum for the current cell
    int up = f(i - 1, j, grid, dp);
    int left = f(i, j - 1, grid, dp);

    dp[i][j] = grid[i][j] + fmin(up, left);
    return dp[i][j];
}

// Main function to calculate minimum path sum
int minPathSum(int** grid, int gridSize, int* gridColSize) {
    int n = gridSize;
    int m = *gridColSize;

    // Allocate and initialize DP table
    int** dp = (int**)malloc(n * sizeof(int*));
    for (int i = 0; i < n; i++) {
        dp[i] = (int*)malloc(m * sizeof(int));
        for (int j = 0; j < m; j++) {
            dp[i][j] = -1;
        }
    }

    // Call the recursive function
    int result = f(n - 1, m - 1, grid, dp);

    // Free memory
    for (int i = 0; i < n; i++) {
        free(dp[i]);
    }
    free(dp);

    return result;
}

//Tabulation Method

int minPathSum(int** grid, int gridSize, int* gridColSize) {
    int n = gridSize; // Number of rows
    int m = *gridColSize; // Number of columns

    // Allocate and initialize DP table
    int** dp = (int**)malloc(n * sizeof(int*));
    for (int i = 0; i < n; i++) {
        dp[i] = (int*)malloc(m * sizeof(int));
    }

    // Fill the DP table
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (i == 0 && j == 0) {
                dp[i][j] = grid[0][0]; // Base case
            } else {
                int up = (i > 0) ? dp[i - 1][j] : INT_MAX;
                int left = (j > 0) ? dp[i][j - 1] : INT_MAX;
                dp[i][j] = grid[i][j] + fmin(up, left);
            }
        }
    }

    // Retrieve the result
    int result = dp[n - 1][m - 1];

    // Free memory
    for (int i = 0; i < n; i++) {
        free(dp[i]);
    }
    free(dp);

    return result;
}
