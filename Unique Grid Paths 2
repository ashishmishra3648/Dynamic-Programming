// Brute Force Method

#include <stdio.h>
#include <stdlib.h>

// Recursive function without memoization
int f(int i, int j, int** obstacleGrid) {
    if (i < 0 || j < 0 || obstacleGrid[i][j] == 1) {
        return 0; // Out of bounds or obstacle
    }
    if (i == 0 && j == 0) {
        return 1; // Reached the starting point
    }
    // Calculate paths from up and left
    int up = f(i - 1, j, obstacleGrid);
    int left = f(i, j - 1, obstacleGrid);
    return up + left;
}

int uniquePathsWithObstacles(int** obstacleGrid, int obstacleGridSize, int* obstacleGridColSize) {
    int m = obstacleGridSize;
    int n = *obstacleGridColSize;
    return f(m - 1, n - 1, obstacleGrid);
}



// Memoization Method

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Recursive function with memoization
int f(int i, int j, int** obstacleGrid, int** dp) {
    // Base conditions
    if (i < 0 || j < 0 || obstacleGrid[i][j] == 1) {
        return 0; // Out of bounds or obstacle
    }
    if (i == 0 && j == 0) {
        return 1; // Reached the starting point
    }

    // Return cached result if already computed
    if (dp[i][j] != -1) {
        return dp[i][j];
    }

    // Calculate paths from up and left
    int up = f(i - 1, j, obstacleGrid, dp);
    int left = f(i, j - 1, obstacleGrid, dp);

    dp[i][j] = up + left; // Store result in DP table
    return dp[i][j];
}

//Tabulation Method

int uniquePathsWithObstacles(int** obstacleGrid, int obstacleGridSize, int* obstacleGridColSize) {
    int m = obstacleGridSize;
    int n = *obstacleGridColSize;

    // Initialize DP table
    int** dp = (int**)malloc(m * sizeof(int*));
    for (int i = 0; i < m; i++) {
        dp[i] = (int*)malloc(n * sizeof(int));
        memset(dp[i], -1, n * sizeof(int)); // Initialize all cells to -1
    }

    // Call recursive function
    int result = f(m - 1, n - 1, obstacleGrid, dp);

    // Free allocated memory for DP table
    for (int i = 0; i < m; i++) {
        free(dp[i]);
    }
    free(dp);

    return result;
}
